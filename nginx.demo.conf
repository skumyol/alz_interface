# Removed external API upstream to allow nginx to start independently

## Default server for testing (responds to any host)
server {
    listen 80 default_server;
    server_name _;

    root /usr/share/nginx/html;
    index index.html;

    # Serve the app on HTTP
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

## HTTP server for alzdetect.skumyol.com (serves app + ACME challenges)
server {
    listen 80;
    server_name alzdetect.skumyol.com;

    root /usr/share/nginx/html;
    index index.html;

    # ACME challenge location for certbot
    location /.well-known/acme-challenge/ {
        root /usr/share/nginx/html;
    }

    # Serve the app on HTTP (remove this redirect after getting certs)
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# HTTPS server block - uncomment after obtaining certificates
# server {
#     listen 443 ssl http2;
#     server_name alzdetect.skumyol.com;
# 
#     # Paths used by certbot / Let's Encrypt (typical)
#     ssl_certificate /etc/letsencrypt/live/alzdetect.skumyol.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/alzdetect.skumyol.com/privkey.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_prefer_server_ciphers on;
# 
#     root /usr/share/nginx/html;
#     index index.html;
# 
#     # Enable gzip compression
#     gzip on;
#     gzip_vary on;
#     gzip_min_length 1024;
#     gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
# 
#     # Security headers
#     add_header X-Frame-Options "SAMEORIGIN" always;
#     add_header X-Content-Type-Options "nosniff" always;
#     add_header X-XSS-Protection "1; mode=block" always;
#     add_header Referrer-Policy "strict-origin-when-cross-origin" always;
# 
#     # Handle client-side routing
#     location / {
#         try_files $uri $uri/ /index.html;
# 
#         # Cache static assets
#         location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
#             expires 1y;
#             add_header Cache-Control "public, immutable";
#         }
#     }
# 
#     # Health check endpoint
#     location /health {
#         access_log off;
#         return 200 "healthy\n";
#         add_header Content-Type text/plain;
#     }
# }
